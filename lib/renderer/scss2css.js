/**
 * Convertor for SCSS structured markup to CSS markup.
 *
 * This utilizes the libsass library, made available via the node-sass project.
 * 
 * @class 	renderer.scss2css
 * @author  ronaldtreur <ronald@lostparticle.net>
 */

var sass = require('node-sass');

/**
 * Convert the supplied SCSS structured markup into CSS.
 *
 * This function executes synchronously.
 *
 * @constructor
 * @param 	{String}	scss 		SCSS structured markup
 * @param 	{Object}	options		Dictionary containing additional instructions
 * @return 	{String}				CSS structured markup
 */
module.exports = function(scss, options) {
	options.stats = {};
	
	try {
		return sass.renderSync({
			data: scss,
			stats: options.stats,
			include_paths: options.includePaths
		});
	} catch (errMsg) {
		return parseError(errMsg, scss);
	}
};

/**
 * Parse the error string into a new Error object./
 * 
 * @param  {String} msg  	Error message (as generated by node-sass)
 * @param  {String} scss 	SCSS source (that potentially contains the error if it is source-based)
 * @return {Error}			Error instance
 */
function parseError(msg, scss) {
	var match = msg.match(/([\w\s]+):(\d+): error: ([\s\S]+)/),
		prefix = 'An error occurred while parsing (generated) SCSS',
		err, line, lineNr;

	if (!match || !match.length || match[1] !== 'source string') {
		return new Error(msg);
	}

	msg = match[3].trim();
	line = getLine(scss, match[2]);
	lineNr = match[2];

	err = new Error(prefix + ' (line: ' + lineNr + '):\n\t' + line + '\n' + msg);
	err.orig = msg;
	err.process = prefix;
	err.line = line;
	err.lineNr = lineNr;

	return err;
}

/**
 * Extract a line from the text.
 * 
 * @param  {String} text   Source text
 * @param  {Number} lineNr Line number
 * @return {String}        Line
 */
function getLine(text, lineNr) {
	var lines = text.split(/\r\n|\n|\r|\f/);
	return lines[lineNr-1].trim();
}